customCommands:
  - name: "üöÄ Bootstrap Project"
    command: "/bootstrap-project"
    description: "Initialize a new Specify project from the latest template."
    argument-hint: "<project-name> <template-type>"
    instructions: "INSTRUCTIONS: When this command is run, execute 'specify init' to bootstrap a new project with the standard Specify template structure. This will create the initial project files including constitution, spec, plan, and tasks documents. Follow the prompts to configure the project settings and generate the foundational documentation for spec-driven development. After completion, the project will be ready for spec-driven development with all core documents in place."

  - name: "‚úÖ Check Tools"
    command: "/check-tools"
    description: "Check that all required tools are installed for Specify development."
    argument-hint: "<tool-type> <environment>"
    instructions: "INSTRUCTIONS: When this command is run, execute 'specify check' to validate that all required tools are installed for Specify development. This will verify the Spec Kit CLI and other dependencies are properly installed and configured. If any tools are missing, provide clear installation instructions for the user's environment."

  - name: "üîß Job Manage"
    command: "/job"
    description: "Comprehensive task management including implementation, verification, and milestone tracking."
    argument-hint: "[--implement <start-task> <end-task>] [--verify <task-id>] [--milestone <name> <task-range>] [--list] [--status <task-id>] [--progress]"
    instructions: "INSTRUCTIONS: When this command is run, provide comprehensive task lifecycle management for development workflow. Parse the provided flags to determine the operation: implement a range of tasks with dependency resolution and parallel execution, verify individual tasks against acceptance criteria, record milestone checkpoints with task verification, list all tasks with status and metadata, show detailed task status, or generate progress reports. Handle all operations with proper dependency chain management, progress tracking, logging to runs/evidence/, and comprehensive status reporting."

  - name: "‚ùì Clarify Spec"
    command: "/clarify-add"
    description: "Append a Q&A clarification to SPEC.md under Clarifications."
    argument-hint: "<question> <answer>"
    instructions: "INSTRUCTIONS: When this command is run, append a new Q&A clarification to the SPEC.md file. Parse the question and answer from arguments, format them properly with timestamps, add them to the Clarifications section of SPEC.md, and ensure the clarification follows the existing format and style of the document. Update any relevant cross-references if needed."

  - name: "‚ôªÔ∏è Refresh Plan"
    command: "/refresh-plan"
    description: "Sync plan/task deltas with current code; note drift in PLAN.md."
    argument-hint: "<target-file> <comparison-branch>"
    instructions: "INSTRUCTIONS: When this command is run, synchronize the current PLAN.md and TASKS.md with the actual codebase state. Compare the specified file with the comparison branch or current state, identify any drift between documentation and implementation, update the plan to reflect current reality, note any discrepancies or outdated information, and log the synchronization results to runs/evidence/."

  - name: "üß± ADR Template"
    command: "/adr"
    description: "Create an Architecture Decision Record with standard sections."
    argument-hint: "<decision-title> <status>"
    instructions: "INSTRUCTIONS: When this command is run, create a new Architecture Decision Record (ADR) with the specified title and status. Generate the ADR file in the appropriate docs/adr/ directory following the standard ADR format, include sections for context, decision, consequences, and compliance status. Update any ADR index files and ensure the new ADR follows project conventions and links to related documentation."

  - name: "üìö Docs Manage"
    command: "/docs"
    description: "Comprehensive documentation management including TOC generation and validation."
    argument-hint: "[--generate-toc [--root-dir <dir>] [--output-file <file>]] [--validate [--target-dir <dir>] [--output-file <file>]] [--list] [--stats]"
    instructions: "INSTRUCTIONS: When this command is run, provide comprehensive documentation management capabilities with intelligent defaults. Parse the provided flags to determine the operation: generate hierarchical table of contents and update README links (auto-detects current directory and uses intelligent defaults for output), perform comprehensive validation of markdown files including link checking and syntax validation (auto-detects docs directory), list all documentation files with metadata, or generate documentation statistics. Handle all operations with proper error handling, progress reporting, detailed result summaries, and smart fallback to standard locations when parameters are not specified."

  - name: "üßπ Refactor Plan"
    command: "/refactor-plan"
    description: "Generate a safe, stepwise refactor plan before edits."
    argument-hint: "<scope> <max-changes> <output-file>"
    instructions: "INSTRUCTIONS: When this command is run, analyze the specified code scope and generate a comprehensive refactoring plan. Identify areas for improvement including dead code, structure optimization, naming conventions, and performance enhancements. Create a detailed step-by-step plan with risk assessment, rollback procedures, and testing requirements. Save the plan to runs/evidence/ and provide clear next steps for implementation."

  - name: "üß© Cleanup Batch"
    command: "/cleanup-batch"
    description: "Apply one batch from the refactor plan and run tests."
    argument-hint: "<batch-number> <test-command>"
    instructions: "INSTRUCTIONS: When this command is run, apply a specific batch from the refactoring plan. Parse the batch number from arguments, execute the specified refactoring changes in small, manageable steps, run the provided test command to validate changes, abort if test failure rate exceeds 5%, update documentation for any structural changes, and log the batch completion with before/after metrics."

  - name: "üß™ Test Scope"
    command: "/test-scope"
    description: "Materialize acceptance criteria into tests for a range."
    argument-hint: "<task-range> <test-type>"
    instructions: "INSTRUCTIONS: When this command is run, translate acceptance criteria from TASKS.md into runnable tests. Parse the specified task range and test type, identify the relevant acceptance criteria, generate appropriate test files with proper assertions, ensure tests follow project conventions, and update any test configuration files as needed."

  - name: "üìà Coverage Snapshot"
    command: "/coverage-snapshot"
    description: "Emit coverage delta snapshot under runs/tests/."
    argument-hint: "<comparison-ref> <output-format>"
    instructions: "INSTRUCTIONS: When this command is run, generate a code coverage snapshot comparing the current state with the specified reference point. Execute the project's coverage tool, capture the results, calculate deltas from the comparison reference, format the output according to specifications, and save detailed results to runs/tests/ with timestamps and comparison metrics."

  - name: "üîé Survey Options"
    command: "/survey"
    description: "Research and compare alternatives with citations."
    argument-hint: "<topic> <criteria>"
    instructions: "INSTRUCTIONS: When this command is run, research and compare alternatives for the specified topic. Evaluate options based on the provided criteria, conduct thorough analysis including pros/cons, performance characteristics, and compatibility factors. Provide detailed comparisons with citations, recommend the best option with justification, and document the decision-making process for future reference."

  - name: "ü™Ñ Scaffold Tauri"
    command: "/scaffold-tauri"
    description: "Create a minimal Tauri shell with stats footer and PS-friendly scripts."
    argument-hint: "<app-name> <template-type>"
    instructions: "INSTRUCTIONS: When this command is run, create a new Tauri application using the official Tauri CLI. Execute 'npx create-tauri-app' with the specified name and template, add a stats footer component, configure PowerShell-friendly build scripts, set up the development environment, and ensure the new application is ready for immediate development and testing."

  - name: "üß∞ Scaffold Python Service"
    command: "/scaffold-python-svc"
    description: "Scaffold a FastAPI backend with tests and .env template."
    argument-hint: "<service-name> <port> <template-type>"
    instructions: "INSTRUCTIONS: When this command is run, create a new FastAPI backend service with the specified configuration. Generate the complete project structure including proper directory layout, dependency management, environment configuration, test scaffolding, and development tooling. Ensure the service is immediately runnable and follows Python/FastAPI best practices."

  # --- Guard & Recovery commands ---
  - name: "üõ°Ô∏è Guard Configure"
    command: "/guard"
    description: "Configure Roo's write-guard system with flexible control over all protection settings."
    argument-hint: "[--enable|--disable] [--delete-threshold <pct>] [--shrink-threshold <pct>] [--snapshot-dir <dir>] [--status]"
    instructions: "INSTRUCTIONS: When this command is run, configure Roo Code's write-guard protection system with flexible control over all settings. Parse the provided flags and arguments, read the current .roo/guard.json configuration, apply the requested modifications to enabled status, deleteThresholdPct, shrinkThresholdPct, and snapshotDir, validate the new configuration values, write the updated configuration back to .roo/guard.json, and provide clear feedback about what was changed and the resulting protection state."

  - name: "üì∏ Snapshot Manage"
    command: "/snapshot"
    description: "Comprehensive snapshot and rollback management for workspace protection."
    argument-hint: "[--create [--note <text>]] [--list] [--rollback-file <file-path>] [--rollback-batch <batch-id>] [--info <snapshot-id>]"
    instructions: "INSTRUCTIONS: When this command is run, provide comprehensive snapshot and rollback management for workspace protection. Parse the provided flags to determine the operation type: create new snapshots with optional notes, list available snapshots with timestamps and metadata, rollback individual files from specific snapshots, rollback entire workspace batches, or show detailed information about specific snapshots. Handle all snapshot operations with proper validation, logging, and safety checks."

  # --- Import/Export helpers ---
  - name: "üì• Import Commands"
    command: "/import-commands"
    instructions: "INSTRUCTIONS: When this command is run, intelligently parse the custom_commands.yaml file and generate individual .md slash command files. Auto-detect the YAML file, validate the structure, create properly named .md files in .roo/commands/, check if content would be identical before writing to avoid unnecessary overwrites, and report the results."
    description: "Intelligent YAML parser that reads custom_commands.yaml and creates individual slash command .md files."

  - name: "üì§ Export Commands"
    command: "/export-commands"
    description: "Bundle all .roo/commands/*.md into a single YAML file."
    argument-hint: "<output-file>"
    instructions: "INSTRUCTIONS: When this command is run, intelligently bundle all individual .md slash command files from .roo/commands/ into a single YAML file. Auto-detect the commands directory, scan for all .md files, parse their frontmatter and content, convert them back to YAML format, check if target file would be identical before writing to avoid unnecessary overwrites, and save the consolidated file to the specified output location or default to .roo/custom_commands.yaml."
