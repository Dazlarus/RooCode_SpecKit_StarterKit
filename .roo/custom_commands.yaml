customCommands:
  - name: "üöÄ Bootstrap Project"
    command: "/bootstrap-project"
    description: "Initialize a new Specify project from the latest template."
    argument-hint: "<project-name> <template-type>"
    instructions: "INSTRUCTIONS: When this command is run, execute 'specify init' to bootstrap a new project with the standard Specify template structure. This will create the initial project files including constitution, spec, plan, and tasks documents. Follow the prompts to configure the project settings and generate the foundational documentation for spec-driven development. After completion, the project will be ready for spec-driven development with all core documents in place."

  - name: "‚úÖ Check Tools"
    command: "/check-tools"
    description: "Check that all required tools are installed for Specify development."
    argument-hint: "<tool-type> <environment>"
    instructions: "INSTRUCTIONS: When this command is run, execute 'specify check' to validate that all required tools are installed for Specify development. This will verify the Spec Kit CLI and other dependencies are properly installed and configured. If any tools are missing, provide clear installation instructions for the user's environment."

  - name: "üîß Implement Range"
    command: "/implement-range"
    description: "Execute a contiguous slice of tasks from TASKS.md, respecting dependencies."
    argument-hint: "<start-task> <end-task>"
    instructions: "INSTRUCTIONS: When this command is run, execute a range of tasks from the current TASKS.md file. Parse the task range from arguments, validate task dependencies, execute tasks in parallel where possible ([P] markers), update progress tracking, and log results to runs/evidence/. Handle dependency chains properly and provide progress updates for each task in the range."

  - name: "‚úÖ Verify Task"
    command: "/verify-task"
    description: "Validate a single task against acceptance criteria from TASKS.md."
    argument-hint: "<task-id>"
    instructions: "INSTRUCTIONS: When this command is run, validate the specified task against its acceptance criteria from TASKS.md. Read the task details, compare with the current codebase state, check that all acceptance criteria are met, update task status if completed, and log verification results to runs/evidence/. If criteria are not met, provide specific feedback on what needs to be addressed."

  - name: "üèÅ Milestone Check"
    command: "/milestone"
    description: "Record a milestone and verify a subset of tasks; logs to CHANGELOG.md."
    argument-hint: "<milestone-name> <task-range>"
    instructions: "INSTRUCTIONS: When this command is run, record a milestone checkpoint in the project. Parse the milestone name and task range from arguments, verify completion status of specified tasks, update CHANGELOG.md with milestone entry including date, tasks completed, and project status, and log verification results to runs/evidence/. Provide summary of milestone achievements and next steps."

  - name: "‚ùì Clarify Spec"
    command: "/clarify-add"
    description: "Append a Q&A clarification to SPEC.md under Clarifications."
    argument-hint: "<question> <answer>"
    instructions: "INSTRUCTIONS: When this command is run, append a new Q&A clarification to the SPEC.md file. Parse the question and answer from arguments, format them properly with timestamps, add them to the Clarifications section of SPEC.md, and ensure the clarification follows the existing format and style of the document. Update any relevant cross-references if needed."

  - name: "‚ôªÔ∏è Refresh Plan"
    command: "/refresh-plan"
    description: "Sync plan/task deltas with current code; note drift in PLAN.md."
    argument-hint: "<target-file> <comparison-branch>"
    instructions: "INSTRUCTIONS: When this command is run, synchronize the current PLAN.md and TASKS.md with the actual codebase state. Compare the specified file with the comparison branch or current state, identify any drift between documentation and implementation, update the plan to reflect current reality, note any discrepancies or outdated information, and log the synchronization results to runs/evidence/."

  - name: "üß± ADR Template"
    command: "/adr"
    description: "Create an Architecture Decision Record with standard sections."
    argument-hint: "<decision-title> <status>"
    instructions: "INSTRUCTIONS: When this command is run, create a new Architecture Decision Record (ADR) with the specified title and status. Generate the ADR file in the appropriate docs/adr/ directory following the standard ADR format, include sections for context, decision, consequences, and compliance status. Update any ADR index files and ensure the new ADR follows project conventions and links to related documentation."

  - name: "üìö Docs TOC"
    command: "/docs-toc"
    description: "Rebuild a global docs table of contents and update README links."
    argument-hint: "<root-dir> <output-file>"
    instructions: "INSTRUCTIONS: When this command is run, scan the specified documentation directory for markdown files, generate a hierarchical table of contents, update the main README.md with links to all discovered documentation, create or update a navigation file if specified, and ensure all internal links are properly formatted and functional."

  - name: "üîç Docs Validate"
    command: "/docs-validate"
    description: "Lint Markdown, check links, and write a report."
    argument-hint: "<target-dir> <output-file>"
    instructions: "INSTRUCTIONS: When this command is run, perform comprehensive validation of documentation files. Scan the specified directory for markdown files, check for broken links, validate markdown syntax, identify formatting inconsistencies, generate a detailed validation report, and save results to the specified output file in runs/evidence/."

  - name: "üßπ Refactor Plan"
    command: "/refactor-plan"
    description: "Generate a safe, stepwise refactor plan before edits."
    argument-hint: "<scope> <max-changes> <output-file>"
    instructions: "INSTRUCTIONS: When this command is run, analyze the specified code scope and generate a comprehensive refactoring plan. Identify areas for improvement including dead code, structure optimization, naming conventions, and performance enhancements. Create a detailed step-by-step plan with risk assessment, rollback procedures, and testing requirements. Save the plan to runs/evidence/ and provide clear next steps for implementation."

  - name: "üß© Cleanup Batch"
    command: "/cleanup-batch"
    description: "Apply one batch from the refactor plan and run tests."
    argument-hint: "<batch-number> <test-command>"
    instructions: "INSTRUCTIONS: When this command is run, apply a specific batch from the refactoring plan. Parse the batch number from arguments, execute the specified refactoring changes in small, manageable steps, run the provided test command to validate changes, abort if test failure rate exceeds 5%, update documentation for any structural changes, and log the batch completion with before/after metrics."

  - name: "üß™ Test Scope"
    command: "/test-scope"
    description: "Materialize acceptance criteria into tests for a range."
    argument-hint: "<task-range> <test-type>"
    instructions: "INSTRUCTIONS: When this command is run, translate acceptance criteria from TASKS.md into runnable tests. Parse the specified task range and test type, identify the relevant acceptance criteria, generate appropriate test files with proper assertions, ensure tests follow project conventions, and update any test configuration files as needed."

  - name: "üìà Coverage Snapshot"
    command: "/coverage-snapshot"
    description: "Emit coverage delta snapshot under runs/tests/."
    argument-hint: "<comparison-ref> <output-format>"
    instructions: "INSTRUCTIONS: When this command is run, generate a code coverage snapshot comparing the current state with the specified reference point. Execute the project's coverage tool, capture the results, calculate deltas from the comparison reference, format the output according to specifications, and save detailed results to runs/tests/ with timestamps and comparison metrics."

  - name: "üîé Survey Options"
    command: "/survey"
    description: "Research and compare alternatives with citations."
    argument-hint: "<topic> <criteria>"
    instructions: "INSTRUCTIONS: When this command is run, research and compare alternatives for the specified topic. Evaluate options based on the provided criteria, conduct thorough analysis including pros/cons, performance characteristics, and compatibility factors. Provide detailed comparisons with citations, recommend the best option with justification, and document the decision-making process for future reference."

  - name: "ü™Ñ Scaffold Tauri"
    command: "/scaffold-tauri"
    description: "Create a minimal Tauri shell with stats footer and PS-friendly scripts."
    argument-hint: "<app-name> <template-type>"
    instructions: "INSTRUCTIONS: When this command is run, create a new Tauri application using the official Tauri CLI. Execute 'npx create-tauri-app' with the specified name and template, add a stats footer component, configure PowerShell-friendly build scripts, set up the development environment, and ensure the new application is ready for immediate development and testing."

  - name: "üß∞ Scaffold Python Service"
    command: "/scaffold-python-svc"
    description: "Scaffold a FastAPI backend with tests and .env template."
    argument-hint: "<service-name> <port> <template-type>"
    instructions: "INSTRUCTIONS: When this command is run, create a new FastAPI backend service with the specified configuration. Generate the complete project structure including proper directory layout, dependency management, environment configuration, test scaffolding, and development tooling. Ensure the service is immediately runnable and follows Python/FastAPI best practices."

  # --- Guard & Recovery commands ---
  - name: "üõ°Ô∏è Guard On"
    command: "/guard-on"
    description: "Enable Roo's write-guard (snapshots + diff thresholds)."
    instructions: "INSTRUCTIONS: When this command is run, enable Roo Code's write-guard protection system. This will activate pre-write snapshots and diff protection for all file modifications. Configure protection thresholds, initialize the snapshot system, and ensure all subsequent file edits are protected against accidental deletion or excessive changes."

  - name: "üõë Guard Off"
    command: "/guard-off"
    description: "Disable Roo's write-guard."
    instructions: "INSTRUCTIONS: When this command is run, disable Roo Code's write-guard protection system. This will deactivate pre-write snapshots and diff protection for file modifications. Provide clear warnings about the risks of unprotected file edits and suggest best practices for safe development without protection."

  - name: "üì∏ Snapshot Now"
    command: "/snapshot-now"
    description: "Create a full workspace snapshot under .roo/local-history/."
    argument-hint: "<note>"
    instructions: "INSTRUCTIONS: When this command is run, create a comprehensive snapshot of the current workspace state. Capture all file states, create timestamped backups in .roo/local-history/, include the provided note for reference, and ensure the snapshot can be used for full workspace restoration if needed."

  - name: "‚Ü©Ô∏è Rollback File"
    command: "/rollback-file"
    description: "Restore a single file from the most recent snapshot."
    argument-hint: "<file-path>"
    instructions: "INSTRUCTIONS: When this command is run, restore the specified file from the most recent snapshot in .roo/local-history/. Locate the most recent backup of the specified file, verify the restoration will not cause data loss, restore the file to its previous state, and log the restoration action with timestamp and file details."

  - name: "‚è™ Rollback Last"
    command: "/rollback-last"
    description: "Restore the entire latest snapshot batch."
    instructions: "INSTRUCTIONS: When this command is run, restore the entire workspace to the state captured in the most recent snapshot batch. Locate the latest snapshot in .roo/local-history/, verify the restoration scope, restore all files to their previous state, and log the restoration action with timestamp and scope details. Provide warnings about data loss and suggest creating a new snapshot before proceeding."

  # --- Import/Export helpers ---
  - name: "üì• Import Commands"
    command: "# INSTRUCTIONS: Run /import-commands in Roo Code chat to parse YAML and generate .md files"
    description: "Intelligent YAML parser that reads custom_commands.yaml and creates individual slash command .md files."

  - name: "üì§ Export Commands"
    command: "/export-commands --out .roo/custom_commands.yaml"
    description: "Bundle all .roo/commands/*.md into a single YAML file."

  - name: "üîÅ Reimport Commands"
    command: "/reimport"
    description: "Re-import all workspace commands from .roo/custom_commands.yaml (default overwrite)."

